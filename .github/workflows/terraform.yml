name: Terraform CI/CD
permissions: write-all

on:
  push:
    branches:
      - main
    paths:
      - "infrastructure/**"
      - "!infrastructure/cloud_functions/**"
  pull_request:
    paths:
      - "infrastructure/**"
      - "!infrastructure/cloud_functions/**"

jobs:
  terraform:
    name: "Terraform Workflow"
    runs-on: ubuntu-latest
    environment: prod
    env:
      TF_VAR_project: "${{ secrets.GCP_PROJECT_ID }}"
      TF_VAR_terraform_bucket_name: ${{ vars.TF_GCP_BUCKET_NAME }}
      TF_VAR_github_token: ${{ secrets.TF_GITHUB_TOKEN }}
      TF_VAR_github_repository: ${{ github.event.repository.name }}
      TF_VAR_github_owner: ${{ github.repository_owner }}
      GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.TERRAFORM_SERVICE_ACCOUNT_KEY }}
    steps:
      # 1. RÃ©cupÃ©rer le dÃ©pÃ´t
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Authentification auprÃ¨s de GCP
      - id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.TERRAFORM_SERVICE_ACCOUNT_KEY }}"
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      # 3. Installer Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.10.5'

      # 4. VÃ©rifier le format Terraform
      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: ./infrastructure

      # 5. GÃ©nÃ©rer le fichier backend.tfvars dans le rÃ©pertoire d'infrastructure
      - name: Generate backend config file
        run: |
          echo "bucket = \"${TF_VAR_terraform_bucket_name}\"" > backend.tfvars
          echo "prefix = \"terraform/state\"" >> backend.tfvars
        working-directory: ./infrastructure

      # 6. Initialiser Terraform en utilisant le fichier backend.tfvars
      - name: Terraform Init
        run: terraform init -backend-config=backend.tfvars
        working-directory: ./infrastructure

      # 7. Valider la configuration Terraform
      - name: Terraform Validate
        run: terraform validate
        working-directory: ./infrastructure

      # 8. ExÃ©cuter le plan et sauvegarder dans un fichier
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan
        working-directory: ./infrastructure

      # 8.1. GÃ©nÃ©rer le plan en format texte (uniquement sur PR)
      - name: Terraform Show
        if: github.event_name == 'pull_request'
        run: terraform show -no-color tfplan > tfplan.txt
        working-directory: ./infrastructure

      # 8.2. Publier le plan en commentaire sur la PR
      - name: Create/Update Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if (!context || !context.issue || !context.issue.number) {
              console.log("No issue context found.");
              return;
            }
            const run_url = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            const run_link = `<a href="${run_url}">Actions</a>`;
            const fs = require('fs');
            // Lecture du fichier gÃ©nÃ©rÃ© par "Terraform Show"
            let raw_plan = fs.readFileSync('infrastructure/tfplan.txt', 'utf8');
            
            // Suppression des sÃ©quences ANSI pour une sortie propre
            const ansiRegex = /\x1B\[[0-9;]*[mK]/g;
            const cleanPlan = raw_plan.replace(ansiRegex, '');
            
            // Tronquer si le plan est trop long
            const planContent = cleanPlan.length > 65000 
              ? " ..." + cleanPlan.substring(cleanPlan.length - 65000) 
              : cleanPlan;
            
            const truncated_message = cleanPlan.length > 65000 
              ? "Output is too long and was truncated. You can read the full Plan in " + run_link + "<br /><br />" 
              : "";
            
            const commentTitle = `### Terraform Status`;
            const commentContent = `
            ${commentTitle}
            #### Terraform Format and Style ðŸ–Œ <code>${{ steps.fmt.outputs.fmt-outcome }}</code>
            #### Terraform Validate ðŸ“– <code>${{ steps.validate.outputs.validate-outcome }}</code>
            #### Terraform Plan ðŸ“– <code>${{ steps.plan.outputs.plan-outcome }}</code>
            <details>
            <summary>Show Plan</summary>
            
            <pre><code class="language-terraform">
            ${planContent}
            </code></pre>
            
            </details>
            ${truncated_message}
            
            Pusher: @${{ github.actor }}
            Action: <code>${{ github.event_name }}</code>
              `;
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            console.log(comments);
            const githubActionsBotComment = comments.data.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes(commentTitle)
            );
            console.log(githubActionsBotComment);
            if (cleanPlan.includes("No changes.")) {
              if (githubActionsBotComment) {
                await github.rest.issues.deleteComment({
                  comment_id: githubActionsBotComment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                });
              } else{
                console.log("No changes detected.");
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: "No changes detected.",
                });
              }
            } else {
                if (githubActionsBotComment) {
                  await github.rest.issues.updateComment({
                    comment_id: githubActionsBotComment.id,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: commentContent,
                  });
                } else {
                    await github.rest.issues.createComment({
                      issue_number: context.issue.number,
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      body: commentContent,
                    });
                }
            }

      # 9. Appliquer automatiquement sur la branche main
      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan
        working-directory: ./infrastructure