name: Terraform CI/CD

on:
  push:
    branches:
      - main
    paths:
      - "infrastructure/**"
      - "!infrastructure/cloud_functions/**"
  pull_request:
    paths:
      - "infrastructure/**"
      - "!infrastructure/cloud_functions/**"

jobs:
  terraform:
    name: "Terraform Workflow"
    runs-on: ubuntu-latest
    environment: prod
    env:
      TF_VAR_project: "${{ secrets.GCP_PROJECT_ID }}"
      TF_VAR_terraform_bucket_name: ${{ vars.TF_GCP_BUCKET_NAME }}
      TF_VAR_region: "${{ vars.GCP_REGION }}"
      TF_VAR_zone: "${{ vars.GCP_ZONE }}"
      TF_VAR_artifact_registry_repository: ${{ vars.TF_GCP_ARTIFACT_REGISTRY_REPOSITORY }}
      TF_VAR_machine_type: ${{ vars.TF_GCP_MACHINE_TYPE }}
      TF_VAR_disk_size: ${{ vars.TF_GCP_DISK_SIZE }}
      TF_VAR_service_account: ${{ vars.TF_GCP_GH_SERVICE_ACCOUNT_NAME }}
      TF_VAR_github_token: ${{ secrets.TF_GITHUB_TOKEN }}
      TF_VAR_github_repository: ${{ github.event.repository.name }}
      TF_VAR_github_owner: ${{ github.repository_owner }}
      GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.TERRAFORM_SERVICE_ACCOUNT_KEY }}
    steps:
      # 1. Récupérer le dépôt
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Authentification auprès de GCP
      - id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.TERRAFORM_SERVICE_ACCOUNT_KEY }}"
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      # 3. Installer Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.10.5'

      # 4. Vérifier le format Terraform
      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: ./infrastructure

      # 5. Générer le fichier backend.tfvars dans le répertoire d'infrastructure
      - name: Generate backend config file
        run: |
          echo "bucket = \"${TF_VAR_terraform_bucket_name}\"" > backend.tfvars
          echo "prefix = \"terraform/state\"" >> backend.tfvars
        working-directory: ./infrastructure

      # 6. Initialiser Terraform en utilisant le fichier backend.tfvars
      - name: Terraform Init
        run: terraform init -backend-config=backend.tfvars
        working-directory: ./infrastructure

      # 7. Valider la configuration Terraform
      - name: Terraform Validate
        run: terraform validate
        working-directory: ./infrastructure

      # 8. Exécuter le plan et sauvegarder dans un fichier
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan
        working-directory: ./infrastructure

      # 9. Appliquer automatiquement sur la branche main
      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan
        working-directory: ./infrastructure
