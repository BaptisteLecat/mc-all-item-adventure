name: Build & Deploy Minecraft Server with Plugins

on:
  push:
    branches:
      - main
    paths:
      - "plugins/**"

jobs:
  build-gradle-jar:
    environment: prod
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21.0.6'

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2

      - name: Echo Java version and Gradle version
        run: |
          java -version
          gradle -version

      - name: Build all plugins
        run: |
          cd plugins
          for d in */ ; do
            cd "$d"
            gradle shadowJar -PtestEnv=false
            cd ..
          done
          echo "✅ All plugins built successfully!"

      - name: Archive plugins
        uses: actions/upload-artifact@v4
        with:
          name: plugins
          path: plugins/*/build/libs/*.jar

  build-push-docker-image:
    environment: prod
    needs:
      - build-gradle-jar
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.determine-image-tag.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create temporary directory
        run: |
          mkdir p plugin_jars

      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: plugins
          path: plugin_jars

      - name: Move JAR files to the root of plugin_jars
        run: |
          mkdir -p plugin_jars_flat
          find plugin_jars -name "*.jar" -exec mv {} plugin_jars_flat/ \;

      - id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.SERVICE_ACCOUNT_KEY }}"
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Configure Docker
        run: gcloud auth configure-docker ${{ vars.GCP_REGION }}-docker.pkg.dev --quiet

      - name: Determine Image Tag
        id: determine-image-tag
        run: |
          IMAGE_TAG=0.0.${{ github.run_number }}
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Build Docker image with dynamic tag
        run: |
          docker build --build-arg PLUGINS_DIR=plugin_jars_flat \
            -t ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mc-all-item-adventure/mc-all-item-adventure:$IMAGE_TAG \
            -t ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mc-all-item-adventure/mc-all-item-adventure:latest \
            -f docker/Dockerfile .

      - name: Push Docker images
        run: |
          docker push ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mc-all-item-adventure/mc-all-item-adventure:$IMAGE_TAG
          docker push ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mc-all-item-adventure/mc-all-item-adventure:latest
          echo "✅ Docker images pushed successfully!"

  deploy-to-vm:
    environment: prod
    needs:
      - build-push-docker-image
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ needs.build-push-docker-image.outputs.IMAGE_TAG }}
    outputs:
        SERVER_STATUS: ${{ steps.health-check.outputs.SERVER_STATUS }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.SERVICE_ACCOUNT_KEY }}"
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Update VM Container with New Image
        run: |
          gcloud compute instances update-container mc-server \
            --zone=${{ vars.GCP_ZONE }} \
            --container-image=${{ vars.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mc-all-item-adventure/mc-all-item-adventure:$IMAGE_TAG

      - name: Fetch deployed container image
        run: |
          echo "Fetching deployed container image..."
          DEPLOYED_IMAGE=$(gcloud compute instances describe mc-server --zone=${{ vars.GCP_ZONE }} \
            --format="json" | jq -r '.metadata.items[] | select(.key=="gce-container-declaration") | .value' | grep "image:" | awk '{print $2}')
          echo "✅ Deployed Image: $DEPLOYED_IMAGE"

      - name: Cleanup Old Docker Images on VM
        run: |
          gcloud compute ssh mc-server --zone=${{ vars.GCP_ZONE }} --command "
            echo '🔥 Cleaning up old Docker images on VM...'
            docker images --format '{{.ID}} {{.Repository}}' | grep -v 'konlet' | awk '{print \$1}' | xargs -r docker rmi -f || true
            echo '✅ Cleanup completed!'
          "

      - name: Health Check - Minecraft Server
        id: health-check
        run: |
          SERVER_IP=$(gcloud compute instances describe mc-server --zone=${{ vars.GCP_ZONE }} --format="get(networkInterfaces[0].accessConfigs[0].natIP)")
          echo "Checking Minecraft server at $SERVER_IP:25565..."
          SERVER_STATUS="❌ Minecraft server did NOT start!"

          for i in {1..10}; do
            if nc -zv $SERVER_IP 25565; then
              SERVER_STATUS="✅ Minecraft server is UP!"
              break
            fi
            echo "❌ Server not responding yet, retrying in 10s..."
            sleep 10
          done

          echo "$SERVER_STATUS"
          echo "SERVER_STATUS=$SERVER_STATUS" >> $GITHUB_OUTPUT

  generate-deployment-report:
    environment: prod
    needs:
      - build-gradle-jar
      - build-push-docker-image
      - deploy-to-vm
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ needs.build-push-docker-image.outputs.IMAGE_TAG }}
      SERVER_STATUS: ${{ needs.deploy-to-vm.outputs.SERVER_STATUS }}
    if: always()
    steps:
      - name: Generate Deployment Report (Summary)
        run: |
          echo "## 🚀 Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📦 Docker Image" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed Image:** \`${{ vars.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/mc-all-item-adventure/mc-all-item-adventure:${IMAGE_TAG}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 💡 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Run ID:** [#${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Déterminer la couleur et l'emoji en fonction du statut du serveur
          if [[ "$SERVER_STATUS" == "✅ Minecraft server is UP!" ]]; then
            STATUS_MARK="🟢 **Success**"
          else
            STATUS_MARK="🔴 **Failed**"
          fi

          echo "### 🛠️ Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "$STATUS_MARK" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📜 Logs & Details" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary><strong>Show Deployment Logs</strong></summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```yaml' >> $GITHUB_STEP_SUMMARY
          gcloud compute instances describe mc-server --zone=${{ vars.GCP_ZONE }} --format="json" | jq -r '.metadata.items[] | select(.key=="gce-container-declaration") | .value' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "_Generated by GitHub Actions on $(date)_" >> $GITHUB_STEP_SUMMARY
      


          
